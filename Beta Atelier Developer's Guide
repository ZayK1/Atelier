# üèóÔ∏è Atelier Developer's Guide - Complete Implementation

## üìã Table of Contents

1. [üéØ Development Sequence](#-development-sequence)
2. [üì± Application Overview](#-application-overview)
3. [üìÑ Pages & Components](#-pages--components)
4. [‚öôÔ∏è Functionality Breakdown](#Ô∏è-functionality-breakdown)
5. [üóÑÔ∏è Database Requirements](#Ô∏è-database-requirements)
6. [üé® Design System](#-design-system)
7. [üñ•Ô∏è UI/UX Specifications](#Ô∏è-uiux-specifications)

---

## üéØ Development Sequence

### Phase 1: Foundation & Core Templates (Months 1-3)
```mermaid
graph TD
    A[Setup Development Environment] --> B[Database Schema Design]
    B --> C[Authentication System]
    C --> D[Template Management System]
    D --> E[Basic UI Components]
    E --> F[Template Customization Engine]
    F --> G[Project Generation System]
    G --> H[Basic Architecture Visualization]
```

#### Week-by-Week Breakdown

**Weeks 1-2: Project Setup**
- Initialize Next.js project with TypeScript
- Set up Prisma with PostgreSQL
- Configure authentication (NextAuth.js)
- Set up Tailwind CSS with design system
- Create basic folder structure

**Weeks 3-4: Database & Auth**
- Implement user registration/login
- Design and implement database schema
- Set up user sessions and middleware
- Create protected route system

**Weeks 5-8: Template System**
- Create template storage and management
- Build template customization interface
- Implement project generation logic
- Create template preview system

**Weeks 9-12: Basic UI & Visualization**
- Build core dashboard components
- Implement basic architecture visualization
- Create project management interface
- Add basic analytics and metrics

### Phase 2: Project Integration (Months 4-6)
```mermaid
graph TD
    A[GitHub OAuth Integration] --> B[Repository Analysis Engine]
    B --> C[Code Structure Detection]
    C --> D[Architecture Mapping]
    D --> E[Project Dashboard Enhancement]
    E --> F[Health Metrics System]
```

### Phase 3: AI Guidance Engine (Months 7-9)
```mermaid
graph TD
    A[OpenAI API Integration] --> B[Context Management System]
    B --> C[Q&A Interface]
    C --> D[Feature Planning Engine]
    D --> E[Best Practice Recommendations]
    E --> F[Learning Content Integration]
```

### Phase 4: Advanced Features (Months 10-12)
```mermaid
graph TD
    A[Interactive Visualizations] --> B[Refactoring Guidance]
    B --> C[Community Features]
    C --> D[Template Marketplace]
    D --> E[Performance Optimization]
    E --> F[Launch Preparation]
```

---

## üì± Application Overview

### üèóÔ∏è Architecture Overview
```mermaid
graph TB
    subgraph "Frontend (Next.js)"
        A[Dashboard] 
        B[Template Builder]
        C[Project Manager]
        D[Architecture Visualizer]
        E[AI Assistant]
    end
    
    subgraph "API Routes"
        F[Auth API]
        G[Template API]
        H[Project API]
        I[GitHub API]
        J[AI API]
    end
    
    subgraph "Services"
        K[Template Engine]
        L[Code Analyzer]
        M[GitHub Service]
        N[AI Service]
        O[Visualization Service]
    end
    
    subgraph "Database"
        P[(PostgreSQL)]
        Q[(Redis Cache)]
    end
    
    A --> F
    B --> G
    C --> H
    D --> I
    E --> J
    
    F --> K
    G --> L
    H --> M
    I --> N
    J --> O
    
    K --> P
    L --> Q
```

### üéØ Core Features
- **Template-Driven Project Creation**: Curated templates with best practices
- **Architecture Visualization**: Auto-generated diagrams and dependency maps
- **AI-Powered Guidance**: Contextual architectural advice and feature planning
- **GitHub Integration**: Repository analysis and continuous monitoring
- **Learning Integration**: Progressive architectural education

---

## üìÑ Pages & Components

### üè† Main Pages Structure

```
/
‚îú‚îÄ‚îÄ / (Landing Page)
‚îú‚îÄ‚îÄ /auth
‚îÇ   ‚îú‚îÄ‚îÄ /login
‚îÇ   ‚îú‚îÄ‚îÄ /register
‚îÇ   ‚îî‚îÄ‚îÄ /reset-password
‚îú‚îÄ‚îÄ /dashboard
‚îú‚îÄ‚îÄ /templates
‚îÇ   ‚îú‚îÄ‚îÄ /browse
‚îÇ   ‚îú‚îÄ‚îÄ /create
‚îÇ   ‚îî‚îÄ‚îÄ /[templateId]
‚îú‚îÄ‚îÄ /projects
‚îÇ   ‚îú‚îÄ‚îÄ /
‚îÇ   ‚îú‚îÄ‚îÄ /create
‚îÇ   ‚îú‚îÄ‚îÄ /[projectId]
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /overview
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /architecture
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /features
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ /settings
‚îú‚îÄ‚îÄ /ai-assistant
‚îú‚îÄ‚îÄ /community
‚îú‚îÄ‚îÄ /profile
‚îî‚îÄ‚îÄ /settings
```

### üìÑ Detailed Page Breakdown

#### 1. Landing Page (`/`)
**Purpose**: Marketing and user acquisition
**Components**:
- Hero section with value proposition
- Feature highlights with interactive demos
- Template showcase
- Testimonials and social proof
- Pricing information
- Call-to-action sections

#### 2. Authentication Pages (`/auth/*`)
**Purpose**: User onboarding and account management
**Components**:
- Login form with OAuth options (GitHub, Google)
- Registration with email verification
- Password reset functionality
- Onboarding wizard for new users

#### 3. Dashboard (`/dashboard`)
**Purpose**: Central hub for user activity
**Components**:
- Project overview cards
- Recent activity feed
- Architecture health metrics
- Quick actions (new project, template, AI question)
- Progress tracking and learning goals

#### 4. Templates (`/templates/*`)
**Purpose**: Template discovery and creation
**Components**:
- Template browser with filters and search
- Template preview with architecture diagrams
- Template customization interface
- Template creation wizard
- Template analytics and usage stats

#### 5. Projects (`/projects/*`)
**Purpose**: Project management and monitoring
**Components**:
- Project list with status indicators
- Project creation wizard
- Individual project dashboard
- Architecture visualization
- Feature planning interface
- GitHub integration panel

#### 6. AI Assistant (`/ai-assistant`)
**Purpose**: Contextual architectural guidance
**Components**:
- Chat interface for Q&A
- Project context selector
- Feature implementation planner
- Best practice recommendations
- Learning resources integration

#### 7. Community (`/community`)
**Purpose**: User engagement and template sharing
**Components**:
- Template marketplace
- User-generated content
- Discussion forums
- Expert advice section
- Template rating and reviews

---

## ‚öôÔ∏è Functionality Breakdown

### üéØ Core Functionality by Page

#### Dashboard Functionality
```typescript
interface DashboardFeatures {
  projectOverview: {
    activeProjects: Project[]
    recentActivity: Activity[]
    healthMetrics: ProjectHealth[]
    quickActions: QuickAction[]
  }
  analytics: {
    learningProgress: LearningMetrics
    architectureScores: ArchitectureScore[]
    timeSpentCoding: TimeMetrics
  }
  recommendations: {
    suggestedTemplates: Template[]
    improvementAreas: string[]
    nextSteps: ActionItem[]
  }
}
```

#### Template System Functionality
```typescript
interface TemplateFeatures {
  browse: {
    filterByCategory: (category: string) => Template[]
    searchTemplates: (query: string) => Template[]
    previewTemplate: (id: string) => TemplatePreview
  }
  customize: {
    configureOptions: (options: TemplateOptions) => CustomTemplate
    previewChanges: (config: TemplateConfig) => Preview
    generateProject: (config: TemplateConfig) => ProjectFiles
  }
  create: {
    defineStructure: (structure: ProjectStructure) => Template
    addBestPractices: (practices: BestPractice[]) => Template
    publishTemplate: (template: Template) => PublishResult
  }
}
```

#### Project Management Functionality
```typescript
interface ProjectFeatures {
  analysis: {
    analyzeArchitecture: (repoUrl: string) => ArchitectureAnalysis
    detectPatterns: (codebase: CodeBase) => ArchitecturePattern[]
    calculateHealthScore: (project: Project) => HealthScore
  }
  visualization: {
    generateDiagram: (architecture: Architecture) => Diagram
    showDependencies: (project: Project) => DependencyGraph
    trackChanges: (project: Project) => ArchitectureHistory
  }
  guidance: {
    askQuestion: (question: string, context: ProjectContext) => AIResponse
    planFeature: (feature: FeatureRequest) => ImplementationPlan
    suggestRefactoring: (codeSmells: CodeSmell[]) => RefactoringPlan
  }
}
```

#### AI Assistant Functionality
```typescript
interface AIFeatures {
  contextualGuidance: {
    analyzeProjectContext: (project: Project) => ProjectContext
    generateResponse: (question: string, context: ProjectContext) => AIResponse
    suggestBestPractices: (currentCode: CodeBase) => BestPractice[]
  }
  featurePlanning: {
    analyzeFeatureRequest: (request: FeatureRequest) => FeatureAnalysis
    generateImplementationPlan: (feature: Feature) => ImplementationPlan
    considerScalability: (plan: ImplementationPlan) => ScalabilityAdvice
  }
  learning: {
    identifyLearningGaps: (userLevel: UserLevel) => LearningGap[]
    recommendResources: (topic: string) => LearningResource[]
    trackProgress: (userId: string) => LearningProgress
  }
}
```

---

## üóÑÔ∏è Database Requirements

### üìä Database Schema Design

```sql
-- Users and Authentication
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(100) NOT NULL,
  avatar_url TEXT,
  github_username VARCHAR(100),
  skill_level VARCHAR(20) DEFAULT 'beginner',
  learning_goals TEXT[],
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Templates
CREATE TABLE templates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  description TEXT,
  category VARCHAR(50) NOT NULL,
  difficulty_level VARCHAR(20) DEFAULT 'beginner',
  author_id UUID REFERENCES users(id),
  is_official BOOLEAN DEFAULT FALSE,
  download_count INTEGER DEFAULT 0,
  rating DECIMAL(3,2) DEFAULT 0,
  tags TEXT[],
  file_structure JSONB NOT NULL,
  configuration_options JSONB,
  best_practices JSONB,
  architecture_pattern VARCHAR(100),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Projects
CREATE TABLE projects (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  description TEXT,
  user_id UUID REFERENCES users(id) NOT NULL,
  template_id UUID REFERENCES templates(id),
  github_repo_url TEXT,
  github_repo_id VARCHAR(100),
  status VARCHAR(20) DEFAULT 'active',
  architecture_pattern VARCHAR(100),
  health_score DECIMAL(3,2),
  last_analyzed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Architecture Analysis
CREATE TABLE architecture_analyses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES projects(id) NOT NULL,
  analysis_type VARCHAR(50) NOT NULL,
  results JSONB NOT NULL,
  architecture_diagram TEXT,
  dependencies JSONB,
  code_metrics JSONB,
  suggestions JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

-- AI Interactions
CREATE TABLE ai_interactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) NOT NULL,
  project_id UUID REFERENCES projects(id),
  question TEXT NOT NULL,
  response TEXT NOT NULL,
  context JSONB,
  feedback_rating INTEGER,
  interaction_type VARCHAR(50) DEFAULT 'question',
  created_at TIMESTAMP DEFAULT NOW()
);

-- Feature Plans
CREATE TABLE feature_plans (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES projects(id) NOT NULL,
  feature_name VARCHAR(100) NOT NULL,
  description TEXT,
  implementation_plan JSONB NOT NULL,
  estimated_complexity VARCHAR(20),
  prerequisites TEXT[],
  status VARCHAR(20) DEFAULT 'planned',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Learning Progress
CREATE TABLE learning_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) NOT NULL,
  topic VARCHAR(100) NOT NULL,
  progress_percentage INTEGER DEFAULT 0,
  completed_exercises INTEGER DEFAULT 0,
  skills_learned TEXT[],
  last_activity_at TIMESTAMP DEFAULT NOW(),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Template Ratings
CREATE TABLE template_ratings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  template_id UUID REFERENCES templates(id) NOT NULL,
  user_id UUID REFERENCES users(id) NOT NULL,
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  review TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(template_id, user_id)
);

-- Project Activities
CREATE TABLE project_activities (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES projects(id) NOT NULL,
  activity_type VARCHAR(50) NOT NULL,
  description TEXT,
  metadata JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);
```

### üîß Database Indexes and Optimization

```sql
-- Performance Indexes
CREATE INDEX idx_projects_user_id ON projects(user_id);
CREATE INDEX idx_projects_status ON projects(status);
CREATE INDEX idx_templates_category ON templates(category);
CREATE INDEX idx_templates_author ON templates(author_id);
CREATE INDEX idx_ai_interactions_user_project ON ai_interactions(user_id, project_id);
CREATE INDEX idx_architecture_analyses_project ON architecture_analyses(project_id);
CREATE INDEX idx_learning_progress_user ON learning_progress(user_id);

-- Full-text search indexes
CREATE INDEX idx_templates_search ON templates USING gin(to_tsvector('english', name || ' ' || description));
CREATE INDEX idx_projects_search ON projects USING gin(to_tsvector('english', name || ' ' || description));
```

---

## üé® Design System

### üé® Color Palette

```css
:root {
  /* Primary Colors - Architectural Blue */
  --primary-50: #eff6ff;
  --primary-100: #dbeafe;
  --primary-200: #bfdbfe;
  --primary-300: #93c5fd;
  --primary-400: #60a5fa;
  --primary-500: #3b82f6;
  --primary-600: #2563eb;
  --primary-700: #1d4ed8;
  --primary-800: #1e40af;
  --primary-900: #1e3a8a;

  /* Secondary Colors - Warm Accent */
  --secondary-50: #fef7ee;
  --secondary-100: #feecd7;
  --secondary-200: #fcd8af;
  --secondary-300: #fabf7c;
  --secondary-400: #f89e47;
  --secondary-500: #f59e0b;
  --secondary-600: #d97706;
  --secondary-700: #b45309;
  --secondary-800: #92400e;
  --secondary-900: #78350f;

  /* Neutral Colors */
  --gray-50: #f9fafb;
  --gray-100: #f3f4f6;
  --gray-200: #e5e7eb;
  --gray-300: #d1d5db;
  --gray-400: #9ca3af;
  --gray-500: #6b7280;
  --gray-600: #4b5563;
  --gray-700: #374151;
  --gray-800: #1f2937;
  --gray-900: #111827;

  /* Success, Warning, Error */
  --success: #10b981;
  --warning: #f59e0b;
  --error: #ef4444;
  --info: #3b82f6;
}
```

### üìù Typography Scale

```css
/* Typography System */
.text-xs { font-size: 0.75rem; line-height: 1rem; }
.text-sm { font-size: 0.875rem; line-height: 1.25rem; }
.text-base { font-size: 1rem; line-height: 1.5rem; }
.text-lg { font-size: 1.125rem; line-height: 1.75rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-2xl { font-size: 1.5rem; line-height: 2rem; }
.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }

/* Font Families */
.font-display { font-family: 'Inter', sans-serif; }
.font-body { font-family: 'Inter', sans-serif; }
.font-mono { font-family: 'JetBrains Mono', monospace; }
```

### üìê Spacing & Layout

```css
/* Spacing Scale */
.space-1 { --space: 0.25rem; }
.space-2 { --space: 0.5rem; }
.space-3 { --space: 0.75rem; }
.space-4 { --space: 1rem; }
.space-5 { --space: 1.25rem; }
.space-6 { --space: 1.5rem; }
.space-8 { --space: 2rem; }
.space-10 { --space: 2.5rem; }
.space-12 { --space: 3rem; }
.space-16 { --space: 4rem; }

/* Container Sizes */
.container-sm { max-width: 640px; }
.container-md { max-width: 768px; }
.container-lg { max-width: 1024px; }
.container-xl { max-width: 1280px; }
```

### üé® Component Styles

```css
/* Button Styles */
.btn {
  @apply px-4 py-2 rounded-lg font-medium transition-all duration-200;
}

.btn-primary {
  @apply bg-primary-600 text-white hover:bg-primary-700 focus:ring-2 focus:ring-primary-500;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-2 focus:ring-gray-400;
}

/* Card Styles */
.card {
  @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6;
}

.card-elevated {
  @apply bg-white rounded-xl shadow-lg border border-gray-200 p-6;
}

/* Input Styles */
.input {
  @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500;
}

/* Architecture Diagram Styles */
.architecture-node {
  @apply bg-primary-50 border-2 border-primary-200 rounded-lg p-4 shadow-sm;
}

.architecture-connection {
  @apply stroke-primary-400 stroke-2;
}
```

---

## üñ•Ô∏è UI/UX Specifications

### üè† Dashboard Layout

```jsx
const DashboardLayout = () => (
  <div className="min-h-screen bg-gray-50">
    <nav className="bg-white shadow-sm border-b border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex items-center">
            <Logo className="h-8 w-auto" />
            <nav className="hidden md:flex space-x-8 ml-10">
              <NavLink href="/dashboard">Dashboard</NavLink>
              <NavLink href="/projects">Projects</NavLink>
              <NavLink href="/templates">Templates</NavLink>
              <NavLink href="/ai-assistant">AI Assistant</NavLink>
            </nav>
          </div>
          <div className="flex items-center space-x-4">
            <NotificationBell />
            <UserMenu />
          </div>
        </div>
      </div>
    </nav>

    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <ProjectOverview />
          <RecentActivity />
        </div>
        <div className="space-y-6">
          <QuickActions />
          <LearningProgress />
          <Recommendations />
        </div>
      </div>
    </main>
  </div>
);
```

### üéØ Template Browser Interface

```jsx
const TemplateBrowser = () => (
  <div className="space-y-6">
    <div className="flex justify-between items-center">
      <h1 className="text-3xl font-bold text-gray-900">Templates</h1>
      <div className="flex space-x-4">
        <SearchInput placeholder="Search templates..." />
        <CategoryFilter />
        <SortDropdown />
      </div>
    </div>

    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {templates.map(template => (
        <TemplateCard
          key={template.id}
          template={template}
          onClick={() => openTemplateModal(template)}
        />
      ))}
    </div>

    <TemplateModal
      isOpen={isModalOpen}
      template={selectedTemplate}
      onClose={() => setIsModalOpen(false)}
      onUseTemplate={handleUseTemplate}
    />
  </div>
);
```

### üìä Architecture Visualization

```jsx
const ArchitectureVisualization = ({ project }) => (
  <div className="bg-white rounded-xl shadow-lg p-6">
    <div className="flex justify-between items-center mb-6">
      <h2 className="text-2xl font-bold text-gray-900">Architecture Overview</h2>
      <div className="flex space-x-2">
        <ViewToggle options={['Diagram', 'Dependencies', 'Metrics']} />
        <ExportButton />
      </div>
    </div>

    <div className="relative h-96 bg-gray-50 rounded-lg">
      <ReactFlow
        nodes={architectureNodes}
        edges={architectureEdges}
        nodeTypes={customNodeTypes}
        edgeTypes={customEdgeTypes}
        onNodeClick={handleNodeClick}
        onEdgeClick={handleEdgeClick}
      />
    </div>

    <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
      <MetricCard
        title="Architecture Score"
        value={project.healthScore}
        change="+5%"
        trend="up"
      />
      <MetricCard
        title="Dependencies"
        value={project.dependencyCount}
        change="-2"
        trend="down"
      />
      <MetricCard
        title="Complexity"
        value={project.complexityScore}
        change="0"
        trend="neutral"
      />
    </div>
  </div>
);
```

### ü§ñ AI Assistant Interface

```jsx
const AIAssistant = () => (
  <div className="flex h-screen bg-gray-50">
    <div className="w-1/4 bg-white shadow-sm border-r border-gray-200">
      <div className="p-4">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Context</h2>
        <ProjectSelector />
        <div className="mt-6">
          <h3 className="text-sm font-medium text-gray-700 mb-2">Quick Questions</h3>
          <QuickQuestionsList />
        </div>
      </div>
    </div>

    <div className="flex-1 flex flex-col">
      <div className="flex-1 overflow-y-auto p-6">
        <ChatMessages messages={messages} />
      </div>
      
      <div className="border-t border-gray-200 p-4">
        <div className="flex space-x-4">
          <input
            type="text"
            placeholder="Ask about architecture, implementation, or best practices..."
            className="flex-1 input"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
          />
          <button
            onClick={handleSendMessage}
            className="btn btn-primary"
            disabled={!inputValue.trim()}
          >
            Send
          </button>
        </div>
        
        <div className="mt-2 flex space-x-2">
          <QuickActionButton action="Plan Feature" />
          <QuickActionButton action="Review Code" />
          <QuickActionButton action="Suggest Refactoring" />
        </div>
      </div>
    </div>
  </div>
);
```

### üì± Mobile Responsive Design

```css
/* Mobile-First Responsive Design */
@media (max-width: 768px) {
  .dashboard-grid {
    @apply grid-cols-1 gap-4;
  }
  
  .template-grid {
    @apply grid-cols-1 gap-4;
  }
  
  .navigation {
    @apply hidden;
  }
  
  .mobile-menu {
    @apply block;
  }
  
  .architecture-visualization {
    @apply h-64;
  }
  
  .ai-assistant {
    @apply flex-col;
  }
  
  .ai-sidebar {
    @apply w-full h-32 border-r-0 border-b;
  }
}

/* Tablet Responsive */
@media (min-width: 769px) and (max-width: 1024px) {
  .dashboard-grid {
    @apply grid-cols-2 gap-6;
  }
  
  .template-grid {
    @apply grid-cols-2 gap-6;
  }
}
```

### üé® Dark Mode Support

```css
/* Dark Mode Variables */
@media (prefers-color-scheme: dark) {
  :root {
    --bg-primary: #1f2937;
    --bg-secondary: #111827;
    --text-primary: #f9fafb;
    --text-secondary: #d1d5db;
    --border-color: #374151;
  }
}

/* Dark Mode Classes */
.dark {
  @apply bg-gray-900 text-gray-100;
  
  .card {
    @apply bg-gray-800 border-gray-700;
  }
  
  .input {
    @apply bg-gray-800 border-gray-600 text-gray-100;
  }
  
  .btn-secondary {
    @apply bg-gray-700 text-gray-200 hover:bg-gray-600;
  }
}
```

### üé≠ Animation & Interactions

```css
/* Smooth Transitions */
.transition-all {
  transition: all 0.2s ease-in-out;
}

/* Loading States */
.loading-skeleton {
  @apply animate-pulse bg-gray-200 rounded;
}

/* Hover Effects */
.hover-lift {
  @apply transform hover:scale-105 transition-transform duration-200;
}

/* Focus States */
.focus-ring {
  @apply focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
}

/* Micro-interactions */
.button-press {
  @apply active:scale-95 transition-transform duration-100;
}

/* Architecture Diagram Animations */
.architecture-node {
  @apply transform transition-all duration-300 hover:scale-105;
}

.architecture-edge {
  animation: dash 1s linear infinite;
}

@keyframes dash {
  to {
    stroke-dashoffset: -10;
  }
}
```

This comprehensive Developer's Guide provides a complete roadmap for implementing Atelier, from the initial setup through advanced features. The guide emphasizes practical implementation details while maintaining focus on the core value proposition of helping developers learn architecture through hands-on practice.